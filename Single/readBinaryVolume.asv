function binaryVolume = readBinaryVolume(tiffPath,start,finish)
% Read 3D binary volume from tiffPath from start to finish.
% if the volume is not binary imbinarize() function will be used.

% inputs,
%   tiffPath     : Path of 3D image volume of segmented vessels. 
%   start        : Start reading slices from this value
%   finish       : Read slices upto this value
%                  Use 0 for the end
          
% outputs,
%   binaryVolume : Boolean valued 3D array
%  
% example,
%   binaryVolume = readBinaryVolume('./Data/Segmented/epi2endo_blo',start,finish)
%
% Written by Vibujithan.V, University of Auckland (2019)

info = imfinfo(inputPath);
totalAvailableSlices = size(info,1);

if start > totalAvailableSlices ||start <= 0, start = 1; end
if finish > totalAvailableSlices || finish <=0, finish = totalAvailableSlices; end

totalSlices = length(start:finish);
I = zeros([info(1).Height,info(1).Width,totalSlices], readAs);
fprintf('Reading slice start : %d to finish: %d\n', start, finish);

disp('Reading images');
for slice=1:totalSlices
    I(:,:,slice) = imread(name,start+slice-1);
end

if strcmp(convertTo, 'double')
    I = im2double(I);
elseif strcmp(convertTo, 'single')
    I = im2single(I);
elseif strcmp(convertTo, 'logical')
    I = logical(I);
end

if sliceToView
    val = 2^16 -1;
    colormap = hot(val);
    temp = ceil(val.*im2double(I(:,:,sliceToView)));
    if sliceToView > totalAvailableSlices, sliceToView = totalAvailableSlices; end
    
    figure;
    imshow(ind2rgb(temp,colormap));
    title(['Raw Image, slice: ' num2str(sliceToView) '/' num2str(totalAvailableSlices)]);
end

end

